mutate(latestData = as.Date(latestData))
#excersise: transform the latestdata column into
# a character column, more of a mutate function, there are som missing values
#that might cause errors
stations[[1]] |>
map(as_tibble) |>
list_rbind() |>
mutate(
latestData = map_chr(latestData,1, .default=NA_character_)
) %>%
mutate(latestData = as.Date(latestData))
mutate(
latestData = map_chr(latestData,1, .default=NA_character_)
) %>%
mutate(latestData = as.Date(latestData))
#excersise: transform the latestdata column into
# a character column, more of a mutate function, there are som missing values
#that might cause errors
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData = map_chr(latestData,1, .default=NA_character_)) %>%
mutate(latestData = as.Date(latestData), tz = "europe/berling")
#excersise: transform the latestdata column into
# a character column, more of a mutate function, there are som missing values
#that might cause errors
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData = map_chr(latestData,1, .default=NA_character_)) %>%
mutate(latestData = as.Date(latestData), tz = "europe/berlin")
#excersise: transform the latestdata column into
# a character column, more of a mutate function, there are som missing values
#that might cause errors
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData = map_chr(latestData,1, .default=NA_character_)) %>%
mutate(latestData = as.Date(latestData), tz = "Europe/Berlin")
mutate(latestData = as.Date(latestData, tz = "Europe/Berlin")
#excersise: transform the latestdata column into
# a character column, more of a mutate function, there are som missing values
#that might cause errors
stations[[1]] %>%
#excersise: transform the latestdata column into
# a character column, more of a mutate function, there are som missing values
#that might cause errors
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData = map_chr(latestData,1, .default=NA_character_)) %>%
mutate(latestData = as.Date(latestData, tz = "Europe/Berlin"))
#excersise: transform the latestdata column into
# a character column, more of a mutate function, there are som missing values
#that might cause errors
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData = map_chr(latestData,1, .default=NA_character_)) %>%
mutate(latestData = as_datetime(latestData, tz = "Europe/Berlin"))
#excersise: transform the latestdata column into
# a character column, more of a mutate function, there are som missing values
#that might cause errors
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData = map_chr(latestData,1, .default=NA_character_)) %>%
mutate(latestData = as_datetime(latestData, tz = "Europe/Berlin")) %>%
head(1) %>%
pull(location)
#excersise: transform the latestdata column into
# a character column, more of a mutate function, there are som missing values
#that might cause errors
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData = map_chr(latestData,1, .default=NA_character_)) %>%
mutate(latestData = as_datetime(latestData, tz = "Europe/Berlin")) %>%
mutate(location = map(location, unlist))
#excersise: transform the latestdata column into
# a character column, more of a mutate function, there are som missing values
#that might cause errors
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData = map_chr(latestData,1, .default=NA_character_)) %>%
mutate(latestData = as_datetime(latestData, tz = "Europe/Berlin")) %>%
mutate(location = map(location, unlist)) %>%
mutate(
lat = map_dbl(location, "latlon.lat")
)
#excersise: transform the latestdata column into
# a character column, more of a mutate function, there are som missing values
#that might cause errors
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData = map_chr(latestData,1, .default=NA_character_)) %>%
mutate(latestData = as_datetime(latestData, tz = "Europe/Berlin")) %>%
mutate(location = map(location, unlist)) %>%
mutate(
lat = map_dbl(location, "latlon.lat"),
lon = map_dbl(location, "latlon.lon")
)
#excersise: transform the latestdata column into
# a character column, more of a mutate function, there are som missing values
#that might cause errors
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData = map_chr(latestData,1, .default=NA_character_)) %>%
mutate(latestData = as_datetime(latestData, tz = "Europe/Berlin")) %>%
mutate(location = map(location, unlist)) %>%
mutate(
lat = map_dbl(location, "latLon.lat"),
lon = map_dbl(location, "latLon.lon")
)
#excersise: transform the latestdata column into
# a character column, more of a mutate function, there are som missing values
#that might cause errors
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData = map_chr(latestData,1, .default=NA_character_)) %>%
mutate(latestData = as_datetime(latestData, tz = "Europe/Berlin")) %>%
mutate(location = map(location, unlist)) %>%
mutate(
lat = map_dbl(location, "latLon.lat"),
lon = map_dbl(location, "latLon.lon")
) %>%
select(location)
View(df_tmp)
setwd("/Users/madsbentsen/Documents/R/BAN400/iterations-madsbentsen")
# Load function for posting GQL-queries and retrieving data:
source("functions/GQL_function.r")
configs <-
read_yaml("vegvesen_configs.yml")
library(yaml)
configs <-
read_yaml("vegvesen_configs.yml")
gql_metadata_qry <- read_file("gql-queries/station_metadata.gql")
library(readr)
gql_metadata_qry <- read_file("gql-queries/station_metadata.gql")
stations_metadata <-
GQL(
query=gql_metadata_qry,
.url = configs$vegvesen_url
)
stations_metadata <-
GQL(
query=gql_metadata_qry,
.url = configs$vegvesen_url
)
library(tidyr)
stations_metadata <-
GQL(
query=gql_metadata_qry,
.url = configs$vegvesen_url
)
library(httr)
library(jsonlite)
library(ggplot2)
library(DescTools)
library(tidyr)
library(magrittr)
library(rlang)
library(lubridate)
library(anytime)
library(readr)
library(yaml)
gql_metadata_qry <- read_file("gql-queries/station_metadata.gql")
stations_metadata <-
GQL(
query=gql_metadata_qry,
.url = configs$vegvesen_url
)
library(tidyr)
library(dplyr)
transform_metadata_to_df <- function(stations_metadata[[1]]) {
transform_metadata_to_df <- function(stations_metadata[[1]]) {
transform_metadata_to_df <- function(stations_metadata) {
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData = map_chr(latestData,1, .default=NA_character_)) %>%
mutate(latestData = as_datetime(latestData, tz = "UTC")) %>%
unnest_wider(location) %>%
unnest_wider(latLon)
return(df)
}
source("functions/data_transformations.r")
stations_metadata_df <-
stations_metadata %>%
transform_metadata_to_df()
#data_transformations.R
library(purrr)
#data_transformations.R
library(purrr)
transform_metadata_to_df <- function(stations_metadata) {
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData = map_chr(latestData,1, .default=NA_character_)) %>%
mutate(latestData = as_datetime(latestData, tz = "UTC")) %>%
unnest_wider(location) %>%
unnest_wider(latLon)
return(df)
}
source("functions/data_transformations.r")
stations_metadata_df <-
stations_metadata %>%
transform_metadata_to_df()
rlang::last_trace()
transform_metadata_to_df <- function(stations_metadata) {
df <- stations_metadata[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData = map_chr(latestData,1, .default=NA_character_)) %>%
mutate(latestData = as_datetime(latestData, tz = "UTC")) %>%
unnest_wider(location) %>%
unnest_wider(latLon)
return(df)
}
source("functions/data_transformations.r")
stations_metadata_df <-
stations_metadata %>%
transform_metadata_to_df()
View(stations_metadata_df)
#### 3: Testing metadata
source("functions/data_tests.r")
test_stations_metadata(stations_metadata_df)
to_iso8601(as_datetime("2016-09-01 10:11:12"),0)
to_iso8601 <- function(datetime, offset_days) {
# Add the offset
new_datetime <- datetime + offset_days*24*60*60  # offset_days converted to seconds
# Format as ISO8601 and append "Z"
return(format(new_datetime, format="%Y-%m-%dT%H:%M:%SZ"))
}
# Test the function
print(to_iso8601(Sys.time(), 2))
to_iso8601(as_datetime("2016-09-01 10:11:12"),0)
to_iso8601(as_datetime("2016-09-01 10:11:12"),-4)
to_iso8601(as_datetime("2016-09-01 10:11:12"),-4)
vol_qry <- function(id, from, to) {
query <- sprintf('{
volume(id: "%s", from: "%s", to: "%s") {
timestamp
value
}
}', id, from, to)
return(query)
}
# testing wheter it works
GQL(
vol_qry(
id=stations_metadata_df$id[1],
from=to_iso8601(stations_metadata_df$latestData[1],-4),
to=to_iso8601(stations_metadata_df$latestData[1],0)
),
.url = configs$vegvesen_url
)
vol_qry <- function(id, from, to) {
query <- sprintf('{
volume(id: "%s", from: "%s", to: "%s") {
timestamp
value
}
}', id, from, to)
return(query)
}
# testing wheter it works
GQL(
vol_qry(
id=stations_metadata_df$id[1],
from=to_iso8601(stations_metadata_df$latestData[1],-4),
to=to_iso8601(stations_metadata_df$latestData[1],0)
),
.url = configs$vegvesen_url
)
vol_qry <- function(id, from, to) {
query <- glue('{
volume(id: "[[id]]", from: "[[from]]", to: "[[to]]") {{
timestamp
value
}}
}', .open = "[[", .close = "]]")
return(query)
}
# testing wheter it works
GQL(
vol_qry(
id=stations_metadata_df$id[1],
from=to_iso8601(stations_metadata_df$latestData[1],-4),
to=to_iso8601(stations_metadata_df$latestData[1],0)
),
.url = configs$vegvesen_url
)
vol_qry <- function(id, from_date, to_date) {
query <- glue('{
volume(id: "[[id]]", from: "[[from_date]]", to: "[[to_date]]") {{
timestamp
value
}}
}', .open = "[[", .close = "]]")
return(query)
}
# testing wheter it works
GQL(
vol_qry(
id=stations_metadata_df$id[1],
from=to_iso8601(stations_metadata_df$latestData[1],-4),
to=to_iso8601(stations_metadata_df$latestData[1],0)
),
.url = configs$vegvesen_url
)
library(tidyr)
# testing wheter it works
GQL(
vol_qry(
id=stations_metadata_df$id[1],
from=to_iso8601(stations_metadata_df$latestData[1],-4),
to=to_iso8601(stations_metadata_df$latestData[1],0)
),
.url = configs$vegvesen_url
)
vol_qry <- function(id, from_date, to_date) {
query <- glue::glue('{
volume(id: "[[id]]", from: "[[from_date]]", to: "[[to_date]]") {{
timestamp
value
}}
}', .open = "[[", .close = "]]")
return(query)
}
# testing wheter it works
GQL(
vol_qry(
id=stations_metadata_df$id[1],
from=to_iso8601(stations_metadata_df$latestData[1],-4),
to=to_iso8601(stations_metadata_df$latestData[1],0)
),
.url = configs$vegvesen_url
)
library(httr)
library(jsonlite)
library(ggplot2)
library(DescTools)
library(tidyr)
library(magrittr)
library(rlang)
library(lubridate)
library(anytime)
library(readr)
library(yaml)
library(httr)
library(jsonlite)
library(ggplot2)
library(DescTools)
library(tidyr)
library(magrittr)
library(rlang)
library(lubridate)
library(anytime)
library(readr)
library(yaml)
source("functions/GQL_function.r")
configs <-
read_yaml("vegvesen_configs.yml")
gql_metadata_qry <- read_file("gql-queries/station_metadata.gql")
stations_metadata <-
GQL(
query=gql_metadata_qry,
.url = configs$vegvesen_url
)
source("functions/data_transformations.r")
setwd("/Users/madsbentsen/Documents/R/BAN400/iterations-madsbentsen")
source("functions/data_transformations.r")
#data_transformations.R
library(purrr)
#data_transformations.R
library(purrr)
transform_metadata_to_df <- function(stations_metadata) {
df <- stations_metadata[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData = map_chr(latestData,1, .default=NA_character_)) %>%
mutate(latestData = as_datetime(latestData, tz = "UTC")) %>%
unnest_wider(location) %>%
unnest_wider(latLon)
return(df)
transform_metadata_to_df <- function(stations_metadata) {
df <- stations_metadata[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData = map_chr(latestData,1, .default=NA_character_)) %>%
mutate(latestData = as_datetime(latestData, tz = "UTC")) %>%
unnest_wider(location) %>%
unnest_wider(latLon)
return(df)
}
source("functions/data_transformations.r")
stations_metadata_df <-
stations_metadata %>%
transform_metadata_to_df()
stations_metadata_df <-
stations_metadata %>%
transform_metadata_to_df()
source("functions/data_transformations.r")
stations_metadata_df <-
stations_metadata %>%
transform_metadata_to_df()
to_iso8601 <- function(datetime, offset_days) {
# Add the offset
new_datetime <- datetime + offset_days*24*60*60  # offset_days converted to seconds
# Format as ISO8601 and append "Z"
return(format(new_datetime, format="%Y-%m-%dT%H:%M:%SZ"))
}
to_iso8601 <- function(datetime, offset_days) {
# Add the offset
new_datetime <- datetime + offset_days*24*60*60  # offset_days converted to seconds
# Format as ISO8601 and append "Z"
return(format(new_datetime, format="%Y-%m-%dT%H:%M:%SZ"))
}
# Test the function
to_iso8601(as_datetime("2016-09-01 10:11:12"),0)
to_iso8601(as_datetime("2016-09-01 10:11:12"),-4)
# Load function for posting GQL-queries and retrieving data:
source("functions/GQL_function.r")
configs <-
read_yaml("vegvesen_configs.yml")
gql_metadata_qry <- read_file("gql-queries/station_metadata.gql")
stations_metadata <-
GQL(
query=gql_metadata_qry,
.url = configs$vegvesen_url
)
source("functions/data_transformations.r")
stations_metadata_df <-
stations_metadata %>%
transform_metadata_to_df()
View(stations_metadata)
View(GQL)
transform_metadata_to_df <- function(stations_metadata) {
df <- stations_metadata[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData = map_chr(latestData,1, .default=NA_character_)) %>%
mutate(latestData = as_datetime(latestData, tz = "UTC")) %>%
unnest_wider(location) %>%
unnest_wider(latLon)
return(df)
}
stations_metadata_df <-
stations_metadata %>%
transform_metadata_to_df()
stations_metadata_df <-
stations_metadata %>%
transform_metadata_to_df()
#### 3: Testing metadata
source("functions/data_tests.r")
test_stations_metadata(stations_metadata_df)
test_stations_metadata(stations_metadata_df)
#varyfing that i works by calling:
GQL(
vol_qry(
id=stations_metadata_df$id[1],
from=to_iso8601(stations_metadata_df$latestData[1],-4),
to=to_iso8601(stations_metadata_df$latestData[1],0)
),
.url = configs$vegvesen_url
)
transform_metadata_to_df <- function(stations_metadata) {
df <- stations_metadata[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData = map_chr(latestData,1, .default=NA_character_)) %>%
mutate(latestData = as_datetime(latestData, tz = "UTC")) %>%
unnest_wider(location) %>%
unnest_wider(latLon)
return(df)
transform_metadata_to_df <- function(stations_metadata) {
df <- stations_metadata[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData = map_chr(latestData,1, .default=NA_character_)) %>%
mutate(latestData = as_datetime(latestData, tz = "UTC")) %>%
unnest_wider(location) %>%
unnest_wider(latLon)
return(df)
}
transform_metadata_to_df <- function(stations_metadata) {
df <- stations_metadata[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData = map_chr(latestData,1, .default=NA_character_)) %>%
mutate(latestData = as_datetime(latestData, tz = "UTC")) %>%
unnest_wider(location) %>%
unnest_wider(latLon)
return(df)
}
# Load function for posting GQL-queries and retrieving data:
source("functions/GQL_function.r")
configs <-
read_yaml("vegvesen_configs.yml")
gql_metadata_qry <- read_file("gql-queries/station_metadata.gql")
stations_metadata <-
GQL(
query=gql_metadata_qry,
.url = configs$vegvesen_url
)
source("functions/data_transformations.r")
stations_metadata_df <-
stations_metadata %>%
transform_metadata_to_df()
